<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:sctrl="clr-namespace:System.Windows.Controls;assembly=PresentationFramework"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:conv="clr-namespace:Pinix.Windows.Controls.Converters"
                    xmlns:jlinq="clr-namespace:Newtonsoft.Json.Linq;assembly=Newtonsoft.Json"
                    xmlns:ctrl="clr-namespace:Pinix.Windows.Controls"
                    xmlns:ts="clr-namespace:Pinix.Windows.Controls.Selectors"
                    xmlns:b="clr-namespace:Pinix.Windows.Controls.Behaviors">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Pinix.Windows.Controls;component/Images/Images.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    
    <sctrl:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#FF595959"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="#FF262626"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF27C7F7"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FFCCEEFB"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF1CC4F7"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF82DFFB"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF818181"/>
    
    <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>

    <Style x:Key="ToggleButton.TriangleExpandCollapseStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                        <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}" Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform CenterX="3" CenterY="3" ScaleX="1.15" ScaleY="1.15"/>
                                    <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                    <TranslateTransform X="-2"/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform CenterX="3" CenterY="3" ScaleX="1.15" ScaleY="1.15"/>
                                        <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                        <TranslateTransform X="-1"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}"/>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleButton.SquareExpandCollapseStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Margin" Value="-2,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Width="15" Height="13" SnapsToDevicePixels="True">
                        <Rectangle Width="9" Height="9" Stroke="#919191" SnapsToDevicePixels="True">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.5,2" StartPoint="0.5,0">
                                    <GradientStop Color="White" Offset="0"/>
                                    <GradientStop Color="Silver" Offset="0.5"/>
                                    <GradientStop Color="LightGray" Offset="1"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle x:Name="ExpandPath" Width="1" Height="5" Stroke="Black" SnapsToDevicePixels="True"/>
                        <Rectangle Width="5" Height="1" Stroke="Black" SnapsToDevicePixels="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility"  TargetName="ExpandPath" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="b:TreeViewItemBehavior.CheckIsRoot" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="24" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Line x:Name="HorLn" 
                              Grid.Row="0" Grid.Column="0"
                              X1="0" Y1="0" X2="1" Y2="0" Stretch="Uniform"
                              Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}" 
                              Margin="11,1,0,0" StrokeDashArray="1 2"
                              SnapsToDevicePixels="True" 
                              Visibility="{Binding ConnectingLines, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PrettifyJsonViewer}}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        <Line x:Name="VerLn" 
                              Grid.Row="0" Grid.RowSpan="2" Grid.Column="0"
                              X1="0" Y1="0" X2="0" Y2="1" Stretch="Uniform" 
                              Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}"
                              Margin="0,0,1,0" StrokeDashArray="1 2" 
                              SnapsToDevicePixels="True"  
                              Visibility="{Binding ConnectingLines, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PrettifyJsonViewer}}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        <ToggleButton x:Name="Expander" ClickMode="Press"
                                      IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                      Style="{Binding ExpandButtonStyle, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PrettifyJsonViewer}}}" />
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" Grid.Column="1"
                                Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="PART_Header" 
                                              ContentSource="Header" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <!--<Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </Trigger>-->
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                        </MultiTrigger>-->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Converter={conv:TreeViewLineConverter}}" Value="True">
                            <Setter TargetName="VerLn" Property="Height" Value="9"/>
                            <Setter TargetName="VerLn" Property="VerticalAlignment" Value="Top"/>
                        </DataTrigger>
                        <Trigger Property="b:TreeViewItemBehavior.IsRoot" Value="True">
                            <Setter TargetName="VerLn" Property="Height" Value="0"/>
                            <Setter TargetName="VerLn" Property="VerticalAlignment" Value="Top"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TextBlock.TokenTypeForegroundConverter" TargetType="{x:Type TextBlock}">
        <Setter Property="Text" Value="{Binding ., Mode=OneWay}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Type}" Value="{x:Static jlinq:JTokenType.String}">
                <Setter Property="Foreground"
                        Value="{Binding StringBrush, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PrettifyJsonViewer}}}" />
                <Setter Property="Text" Value="{Binding ., StringFormat='{}&quot;{0}&quot;', Mode=OneWay}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="{x:Static jlinq:JTokenType.Null}">
                <Setter Property="Foreground"
                        Value="Blue" />
                <Setter Property="Text" Value="null"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="{x:Static jlinq:JTokenType.Boolean}">
                <Setter Property="Foreground"
                        Value="DarkBlue" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="{x:Static jlinq:JTokenType.Integer}">
                <Setter Property="Foreground"
                        Value="{Binding IntegerBrush, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PrettifyJsonViewer}}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="{x:Static jlinq:JTokenType.Float}">
                <Setter Property="Foreground"
                        Value="{Binding FloatBrush, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PrettifyJsonViewer}}}" />
                <Setter Property="Text">
                    <Setter.Value>
                        <MultiBinding Converter="{conv:DoublePrecisionConverter}">
                            <Binding Path="Value" />
                            <Binding Path="DoublePrecision"
                                     RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ctrl:PrettifyJsonViewer}}" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TextBlock.OnShowIconsHideStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Visibility" Value="Visible"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ShowIcons, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PrettifyJsonViewer}}}" Value="True">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Image}" x:Key="Image.Icon">
        <Setter Property="Margin" Value="0,0,5,0"/>
        <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
        <Setter Property="RenderOptions.EdgeMode" Value="Unspecified"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Visibility"
                Value="{Binding ShowIcons, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PrettifyJsonViewer}}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
    </Style>

    <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ctrl:PrettifyJsonViewer}">
        <Style.Resources>
            <HierarchicalDataTemplate DataType="{x:Type jlinq:JArray}"
                                      ItemsSource="{Binding}">
                <StackPanel Orientation="Horizontal">
                    <Image Source="{StaticResource IcoArray}" Width="16" Height="16"  Style="{StaticResource Image.Icon}"/>
                    <TextBlock Text="array"
                               Foreground="{Binding PropertyBrush, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PrettifyJsonViewer}}}"
                               Style="{StaticResource TextBlock.OnShowIconsHideStyle}"/>
                    <TextBlock Text="{Binding Count, StringFormat='{} [{0}]'}"
                               Visibility="{Binding ShowArrayLength, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PrettifyJsonViewer}}, Converter={StaticResource BooleanToVisibilityConverter}}"
                               Margin="0,0,0,3">
                    </TextBlock>
                </StackPanel>
            </HierarchicalDataTemplate>
            <HierarchicalDataTemplate x:Key="ObjectDataTemplate"
                                      DataType="{x:Type jlinq:JObject}"
                                      ItemsSource="{Binding Converter={conv:MethodConverter}, ConverterParameter='Children'}">
                <StackPanel Orientation="Horizontal">
                    <Image Source="{StaticResource IcoObject}" Width="16" Height="16" Style="{StaticResource Image.Icon}"/>
                    <TextBlock Text="{Binding Name}"
                           Foreground="{Binding PropertyBrush, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PrettifyJsonViewer}}}" />
                </StackPanel>
            </HierarchicalDataTemplate>
            <HierarchicalDataTemplate x:Key="ArrayDataTemplate"
                                      DataType="{x:Type jlinq:JProperty}"
                                      ItemsSource="{Binding Converter={conv:MethodConverter}, ConverterParameter='Children'}">
                <StackPanel Orientation="Horizontal">
                    <Image Source="{StaticResource IcoArray}" Width="16" Height="16"  Style="{StaticResource Image.Icon}"/>
                    <TextBlock Text="{Binding Name}"
                               Foreground="{Binding PropertyBrush, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PrettifyJsonViewer}}}" />
                    <TextBlock Text="{Binding Count, StringFormat='{} [{0}]'}"
                               DataContext="{Binding Converter={conv:MethodConverter}, ConverterParameter='Children'}" 
                               Visibility="{Binding ShowArrayLength, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PrettifyJsonViewer}}, Converter={StaticResource BooleanToVisibilityConverter}}">
                    </TextBlock>
                </StackPanel>
            </HierarchicalDataTemplate>
            <HierarchicalDataTemplate x:Key="ValueDataTemplate"
                                      DataType="{x:Type jlinq:JProperty}">
                <StackPanel Orientation="Horizontal">
                    <Image Source="{StaticResource IcoProperty}" Width="16" Height="16"  Style="{StaticResource Image.Icon}"/>
                    <TextBlock Text="{Binding Name, Mode=OneWay}" FontWeight="{Binding PropertyFontWeight, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PrettifyJsonViewer}}}"
                               Foreground="{Binding PropertyBrush, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PrettifyJsonViewer}}}" />
                    <TextBlock Text=" : " />
                    <TextBlock DataContext="{Binding Value, Mode=OneWay}" MinWidth="10" MaxWidth="450"
                               TextWrapping="Wrap"
                               Style="{StaticResource TextBlock.TokenTypeForegroundConverter}" />
                    <Button Style="{StaticResource ButtonStyle}" Background="{Binding Value, Mode=OneWay, Converter={conv:HexColorConverter}}"
                            BorderBrush="Black" BorderThickness="1"
                            Visibility="{Binding Value, Mode=OneWay, Converter={conv:IsHexColorConverter}}"
                            Width="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PrettifyJsonViewer}}}" 
                            Height="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PrettifyJsonViewer}}}" 
                            Margin="5,1"
                            Command="{Binding CopyRgbaToClipboardCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PrettifyJsonViewer}}}"
                            CommandParameter="{Binding Value, Mode=OneWay}">
                        <Button.ToolTip>
                            <ToolTip Foreground="Black">
                                <StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <Border Background="{Binding Value, Mode=OneWay, Converter={conv:HexColorConverter}}"
                                            BorderBrush="Black" BorderThickness="1"
                                            Width="16" 
                                            Height="16" 
                                            Margin="5,1"/>
                                        <TextBlock Text="{Binding Value, Mode=OneWay}" Margin="5,1"/>
                                    </StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock Text="RGBA" Margin="5,1" FontWeight="Bold"/>
                                        <TextBlock Text="{Binding Value, Mode=OneWay, Converter={conv:RgbaConverter}, StringFormat='{}({0})'}" Margin="1"/>
                                    </StackPanel>
                                </StackPanel>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                </StackPanel>
            </HierarchicalDataTemplate>
            <HierarchicalDataTemplate DataType="{x:Type jlinq:JObject}" 
                                      ItemsSource="{Binding Converter={conv:MethodConverter}, ConverterParameter='Children'}">
                <StackPanel Orientation="Horizontal" Margin="1">
                    <TextBlock Text=" "/>
                    <TextBlock Text="{}{ }" Foreground="#729fcf" Style="{StaticResource TextBlock.OnShowIconsHideStyle}"/>
                    <Image Source="{StaticResource IcoObject}" Width="16" Height="16" Style="{StaticResource Image.Icon}"/>
                </StackPanel>
            </HierarchicalDataTemplate>
            <HierarchicalDataTemplate DataType="{x:Type jlinq:JValue}">
                <TextBlock DataContext="{Binding ., Mode=OneWay}"
                           Style="{StaticResource TextBlock.TokenTypeForegroundConverter}" />
            </HierarchicalDataTemplate>
            <ts:JsonPropertyDataTemplateSelector x:Key="JsonTemplateSelector"
                                                 ObjectTemplate="{StaticResource ObjectDataTemplate}"
                                                 ValueTemplate="{StaticResource ValueDataTemplate}"
                                                 ArrayTemplate="{StaticResource ArrayDataTemplate}"/>
        </Style.Resources>

        <Setter Property="Margin" Value="5" />
        <Setter Property="MinHeight" Value="48" />
        <Setter Property="MinWidth" Value="150" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="DoublePrecision" Value="6" />
        <Setter Property="ExpandButtonStyle" Value="{StaticResource ToggleButton.TriangleExpandCollapseStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:PrettifyJsonViewer}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <TreeView x:Name="PART_RootTree"
                                  ItemTemplateSelector="{StaticResource JsonTemplateSelector}"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  VirtualizingStackPanel.IsVirtualizing="True"
                                  VirtualizingStackPanel.VirtualizationMode="Recycling">
                            <TreeView.ItemContainerStyle>
                                <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
                                    
                                    <Setter Property="IsExpanded"
                                            Value="{Binding IsExpanded, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PrettifyJsonViewer}}}" />
                                </Style>
                            </TreeView.ItemContainerStyle>
                        </TreeView>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>